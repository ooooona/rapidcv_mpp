set(THIRD_PATH_DIR ${CMAKE_SOURCE_DIR}/thirdparty)
message("THIRDPARTY Path is ${THIRD_PATH_DIR}")

macro(add_thirdparty_library_shared DIR)
    MESSAGE("shared include: ${DIR}/include")
    INCLUDE_DIRECTORIES(${DIR}/include)
    file(GLOB_RECURSE HEADERS_H   "${DIR}/include/*.h")
    foreach(header ${HEADERS_H})
        set_source_files_properties(${header} PROPERTY HEADER_FILE_ONLY TRUE)
        MESSAGE("shared include ${header}")
    endforeach()
    file(GLOB_RECURSE HEADERS_HPP   "${DIR}/include/*.hpp")
    foreach(header ${HEADERS_HPP})
        set_source_files_properties(${header} PROPERTY HEADER_FILE_ONLY TRUE)
        MESSAGE("shared include ${header}")
    endforeach() 
    foreach(libname ${ARGN})
        add_library(${libname} SHARED IMPORTED)
        set_property(TARGET ${libname} PROPERTY
                            IMPORTED_LOCATION ${DIR}/lib/lib${libname}.so)
        get_filename_component(resolvedFile ${DIR}/lib/lib${libname}.so REALPATH)
        install(FILES ${resolvedFile} DESTINATION "lib")
        MESSAGE("shared add thirdparty shared lib ${libname}")
    endforeach()
endmacro(add_thirdparty_library_shared)


macro(add_thirdparty_library_static DIR)
    MESSAGE("static include: ${DIR}/include")
    INCLUDE_DIRECTORIES(${DIR}/include)
    file(GLOB_RECURSE HEADERS_H   "${DIR}/include/*.h")
    foreach(header ${HEADERS_H})
        set_source_files_properties(${header} PROPERTY HEADER_FILE_ONLY TRUE)
        MESSAGE("static include ${header}")
    endforeach()
    file(GLOB_RECURSE HEADERS_HPP   "${DIR}/include/*.hpp")
    foreach(header ${HEADERS_HPP})
        set_source_files_properties(${header} PROPERTY HEADER_FILE_ONLY TRUE)
        MESSAGE("static include ${header}")
    endforeach()
    foreach(libname ${ARGN})
        add_library(${libname} STATIC IMPORTED)
        set_property(TARGET ${libname} PROPERTY
                            IMPORTED_LOCATION ${DIR}/lib/lib${libname}.a)
        MESSAGE("static add thirdparty static lib ${libname}")
    endforeach()
endmacro(add_thirdparty_library_static)

message(STATUS "include hisi libs")
set(HISI_LIBS mpi md nnie ive upvqe dnvqe VoiceEngine securec)
add_thirdparty_library_shared(${THIRD_PATH_DIR}/hisi ${HISI_LIBS})
set_property(TARGET mpi md nnie ive upvqe dnvqe VoiceEngine securec
             PROPERTY IMPORTED_NO_SONAME true)